<document>
  <body>
    <section name="Modules">
      <p>A Module in MaPSeq is what Workflows are made of, comprising
      the vertexes of a graph.  They are the units of work in a
      Workflow that run third party code/libraries.  There are three
      lifecycle events to a Module.  These include input validation,
      execution, and output validation.  A Module will make a number
      of web service calls, mostly for provenance.  If the "--dryRun"
      argument is present, no web service calls are made.</p>

      <subsection name="Getting started">
	<p>Each class intending to be a Module must extend the
	edu.unc.mapseq.module.Module class and have the
	edu.unc.mapseq.module.annotations.Application annotation.  The
	Module class itself is an abstract class that extends
	java.util.Callable &amp; returns a ModuleOutput class.  There
	are two types of ModuleOutput classes (ShellModuleOutput &amp;
	DefaultModuleOutput).  The Module.call() method, which returns
	a ShellModuleOutput class, uses reflection to construct the
	command line arguments to run a third party library.</p>
      </subsection>

      <subsection name="Code Generation">
	<p>Code generation is used to abstract away the boilerplate
	code that handles the three lifecycle events.  The intent of
	this was to make the creation of Modules as clean/easy as
	possible for intented users.  The code generation library used
	is called <a href="https://codemodel.java.net/">CodeModel</a>.
	For each Module, there is a cooresponding CLI class to house
	the execution boilerplate code.  For example, if an Echo class
	exists, a coorespoding EchoCLI will be generated and compiled
	at build time.  Each CLI class will expose a Module's member
	variables as command line arguments &amp; return exit code -1
	if there any runtime exceptions.</p>
      </subsection>

      <subsection name="Validation">
	<p>Module validation is done using <a
	href="http://hibernate.org/validator/">Hibernate's
	Validator</a>, as well as a number of custom validation
	annotations, on a per member variable basis.  Here is an
	example from the Echo module:</p>
<pre>
@Size(min = 1, message = "Greeting is required", groups = InputValidations.class)
@NotNull(message = "Greeting is required", groups = InputValidations.class)
@InputArgument(delimiter = "")
private String greeting;

@FileIsReadable(message = "File does not exist", groups = OutputValidations.class)
@NotNull(message = "Output file name is required", groups = InputValidations.class)
@OutputArgument(redirect = true, persistFileData = true)
private File output;
</pre>
        <p>What the combination of validation annotations for the
        greeting variable means is that greeting cannot be null &amp;
        must be longer than 1 byte in size.  The validation
        annotations of the output variable requires that the output
        File be readable and not null.  Note that the annotations are
        grouped by InputValidations &amp; OutputValidations classes.
        These two classes are used to identify which set of member
        variables will be validated &amp; when.  If there are
        validation violations, then the Module will exit with a
        "message" and a exit code of -1.</p>
      </subsection>

      <subsection name="Putting it all together....Echo Module">
	<p>Here is the full Echo Module class:</p>
<pre>
@Application(name = "Echo")
@Executable(value = "/bin/echo")
public class Echo extends Module {

    @Size(min = 0, message = "Greeting is required", groups = InputValidations.class)
    @NotNull(message = "Greeting is required", groups = InputValidations.class)
    @InputArgument(delimiter = "")
    private String greeting;

    @FileIsReadable(message = "File does not exist", groups = OutputValidations.class)
    @NotNull(message = "Output file name is required", groups = InputValidations.class)
    @OutputArgument(redirect = true, persistFileData = true)
    private File output;

    public Echo() {
        super();
    }

    @Override
    public Class&lt;?&gt; getModuleClass() {
        return Echo.class;
    }

    public String getGreeting() {
        return greeting;
    }

    public void setGreeting(String greeting) {
        this.greeting = greeting;
    }

    public File getOutput() {
        return output;
    }

    public void setOutput(File output) {
        this.output = output;
    }

}
</pre>
      </subsection>

      <subsection name="Running Echo Module">
	<p>Running with no arguments:</p>
<pre>
$ ./mapseq-run-module.sh edu.unc.mapseq.module.core.EchoCLI 
The value of class edu.unc.mapseq.module.core.Echo.output was: null.  Output file name is required
The value of class edu.unc.mapseq.module.core.Echo.greeting was: null.  Greeting is required
usage: EchoCLI
 -?,--help                                          print this help
                                                    message
    --dryRun                                        no web service calls &amp;
                                                    echo command line
                                                    without running
    --greeting &lt;greeting&gt;
    --output &lt;output&gt;
    --persistFileData                               persist FileData's if
                                                    they exist
    --serializeFile &lt;serializeFile&gt;           Serialize File
    --workflowRunAttemptId &lt;workflowRunAttemptId&gt;   WorkflowRunAttempt
                                                    identifier
</pre>	
	<p>Output with no input:</p>
<pre>
$ ./mapseq-run-module.sh edu.unc.mapseq.module.core.EchoCLI --output /tmp/zipitydoda.txt
The value of class edu.unc.mapseq.module.core.Echo.greeting was: null.  Greeting is required
usage: EchoCLI
 -?,--help                                          print this help
                                                    message
    --dryRun                                        no web service calls &amp;
                                                    echo command line
                                                    without running
    --greeting &lt;greeting&gt;
    --output &lt;output&gt;
    --persistFileData                               persist FileData's if
                                                    they exist
    --serializeFile &lt;serializeFile                 Serialize File
    --workflowRunAttemptId &lt;workflowRunAttemptId&gt;   WorkflowRunAttempt
                                                    identifier
</pre>	
	<p>Doing a dry run:</p>
<pre>
$ ./mapseq-run-module.sh edu.unc.mapseq.module.core.EchoCLI --dryRun --greeting Hello World --output /tmp/zipitydoda.txt
/bin/echo Hello World > /tmp/zipitydoda.txt
</pre>	
      </subsection>

    </section>
  </body>
</document>
